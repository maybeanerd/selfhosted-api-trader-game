import { SupportedActivityType } from '@/modules/crossroads/activitypub/activity';
import { pgEnum, pgTable, text, timestamp, uuid } from 'drizzle-orm/pg-core';

export const activityPubActivityType = pgEnum(
  'activityPubActivityType',
  Object.values(SupportedActivityType) as [string, ...Array<string>],
);

export const activityPubActivity = pgTable('activityPubActivity', {
  id: text('id').primaryKey(),
  // TODO find out if maybe removing internalIDs and replacing them with "externalId"
  // in th game object that references an AP ativity might be nicer

  /**
   * If the activity exists on this server it will have an internalId
   * which will be mapped to the id in the corresponding table
   * (e.g. a follow to the treaty)
   *
   * Not all activities will be mappable to a game object,
   * but they will still get an internal ID.
   *
   * If created on this server, by convention it should be the same as
   * the uuid used as part of the id of the AP activity
   *
   * If received from another server, it will be a uuid generated by this server
   */
  internalId: uuid('internalId').unique(),

  receivedOn: timestamp('receivedOn').notNull(),
  type: activityPubActivityType('type')
    .$type<SupportedActivityType>()
    .notNull(),
  actor: text('actor').notNull(),
  object: text('object').notNull(),
  target: text('target'),
});

export type ActivityPubActivity = typeof activityPubActivity.$inferSelect;
export type NewActivityPubActivity = typeof activityPubActivity.$inferInsert;
